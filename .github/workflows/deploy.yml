name: Deploy App

on:
  push:
    branches:
      - dclm-dev
  pull_request:
    branches:    
      - dclm-dev
    types:
      - closed

env:
  APP_URL: ${{ secrets.DL_APP_URL }}
  APP_DIR: ${{ secrets.DL_APP_DIR }}
  ENV_DEST: ${{ secrets.DL_ENV_DEST }}
  WORK_DIR: ${{ secrets.DL_WORK_DIR }}
  SSH_HOST: ${{ secrets.DL_SSH_HOST }}
  SSH_USERNAME: ${{ secrets.DL_SSH_USERNAME }}

jobs:
  build-image:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build and push Docker image
        env:
          IU: ${{ secrets.DL_IU }}
          IN: ${{ secrets.DL_IN}}
          IV: ${{ secrets.DL_IV}}
          DIN: ${{ secrets.DL_DIN}}
          DLU: ${{ secrets.DL_DLU}}
          DLP: ${{ secrets.DL_DLP }}
          DOCKERFILE: ${{ secrets.DL_DFILE}}
        run: |
          docker build -t $DIN -f $DOCKERFILE .
          echo $DLP | docker login -u $DLU --password-stdin
          docker push $DIN
  
  create-dns-record:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DL_AWS_KEY }}
          aws-secret-access-key: ${{ secrets.DL_AWS_SECRET }}
          aws-region: us-east-1
      - name: Create Route 53 DNS Record
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DL_AWS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DL_AWS_SECRET }}
          HOSTED_ZONE_ID: ${{ secrets.DL_HOSTED_ZONE_ID }}
          SERVER_IP: ${{ secrets.DL_SERVER_IP }}
          URL1: ${{ secrets.DL_URL1 }}
          URL2: ${{ secrets.DL_URL2 }}
          URL3: ${{ secrets.DL_URL3 }}
        run: |
          chmod +x app.sh
          ./app.sh 7
        working-directory: ${{ env.WORK_DIR }}
  
  create-app-dir:
    runs-on: ubuntu-latest
    environment: dev
    needs: create-dns-record
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DL_SSH_KEY }}
      - name: Create app directory
        env:
          IN: ${{ secrets.DL_IN }}
          CODE_HIVE: ${{ secrets.DL_CODE_HIVE }}
        run: |
          # Create app directory
          ssh -T -o "StrictHostKeyChecking=no" "$SSH_USERNAME@$SSH_HOST" \
          "IN=$IN" \
          'bash -s' < ./app.sh 8
        working-directory: ${{ env.WORK_DIR }}
  
  clone-app-repo:
    runs-on: ubuntu-latest
    environment: dev
    needs: create-app-dir
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DL_SSH_KEY }}
      - name: Clone app
        env:
          REPO: ${{ secrets.DL_GH_REPO_URL }}
          GIT_BRANCH: ${{ secrets.DL_GIT_BRANCH }}
        run: |
          ssh -T -o "StrictHostKeyChecking=no" "$SSH_USERNAME@$SSH_HOST" \
          "APP_DIR=$APP_DIR" \
          "REPO=$REPO" \
          "GIT_BRANCH=$GIT_BRANCH" \
          'bash -s' < ./app.sh 9
        working-directory: ${{ env.WORK_DIR }}
  
  create-nginx-vhost:
    runs-on: ubuntu-latest
    environment: dev
    needs: clone-app-repo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DL_SSH_KEY }}
      - name: Create & copy vhost config file
        env:
          VHOST_CONFIG: ${{ vars.NGX }}
        run: |
          echo -e "$VHOST_CONFIG" > vhost.conf
          tr -d '\r' < vhost.conf > vhost_fixed.conf
          mv vhost_fixed.conf vhost.conf
          cat vhost.conf && ls -la
          scp -o "StrictHostKeyChecking=no" -r vhost.conf "$SSH_USERNAME@$SSH_HOST:$ENV_DEST"
      - name: Create Nginx vhost
        env:
          APP_PROXY_URL: ${{ secrets.DL_APP_PROXY_URL }}
          NGINX_CONF_DIR: ${{ secrets.DL_NGINX_CONF_DIR }}
          NGINX_CONF_FILE: ${{ secrets.DL_NGINX_CONF_FILE }}
          CERT: ${{ secrets.DL_CERT }}
          CERT_KEY: ${{ secrets.DL_CERT_KEY }}
        run: |
          ssh -T -o "StrictHostKeyChecking=no" "$SSH_USERNAME@$SSH_HOST" \
          "APP_URL=$APP_URL" \
          "APP_PROXY_URL=$APP_PROXY_URL" \
          "NGINX_CONF_DIR=$NGINX_CONF_DIR" \
          "NGINX_CONF_FILE=$NGINX_CONF_FILE" \
          "CERT=$CERT" \
          "CERT_KEY=$CERT_KEY" \
          "ENV_DEST=$ENV_DEST" \
          'bash -s' < ./app.sh 10
        working-directory: ${{ env.WORK_DIR }}
  
  deploy-app:
    runs-on: ubuntu-latest
    environment: dev
    needs: create-nginx-vhost
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate envfile
        env:
          ENV_FILE: ${{ secrets.DL_ENV_FILE }}
          ENV_SRC: ${{ secrets.DL_ENV_SRC }}
        id: envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_COMPOSE_PROJECT_NAME: ${{ secrets.COMPOSE_PROJECT_NAME }}
          envkey_DL_STACK: ${{ secrets.DL_STACK }}
          envkey_DL_COMPOSE_NETWORK: ${{ secrets.DL_COMPOSE_NETWORK }}
          envkey_DL_COMPOSE_PORT: ${{ secrets.DL_COMPOSE_PORT }}
          envkey_DL_CERT: ${{ secrets.DL_CERT }}
          envkey_DL_CERT_KEY: ${{ secrets.DL_CERT_KEY }}
          envkey_DL_CN: ${{ secrets.DL_CN }}
          envkey_DL_IU: ${{ secrets.DL_IU }}
          envkey_DL_IN: ${{ secrets.DL_IN }}
          envkey_DL_IV: ${{ secrets.DL_IV }}
          envkey_DL_DIN: ${{ secrets.DL_DIN }}
          envkey_DL_DLU: ${{ secrets.DL_DLU }}
          envkey_DL_DLP: ${{ secrets.DL_DLP }}
          envkey_DL_DCF: ${{ secrets.DL_DCF }}
          envkey_DL_DFILE: ${{ secrets.DL_DFILE }}
          envkey_DL_ENV: ${{ secrets.DL_ENV }}
          envkey_DL_ENV_ENV: ${{ secrets.DL_ENV_ENV }}
          envkey_DL_REPO: ${{ secrets.DL_REPO }}
          envkey_DL_GH_TOKEN: ${{ secrets.DL_GH_TOKEN }}
          envkey_DL_GH_REPO_URL: ${{ secrets.DL_GH_REPO_URL }}
          envkey_DL_EXCLUDE: ${{ secrets.DL_EXCLUDE }}
          envkey_APP_NAME: ${{ secrets.APP_NAME }}
          envkey_APP_ENV: ${{ secrets.APP_ENV }}
          envkey_APP_KEY: ${{ secrets.APP_KEY }}
          envkey_APP_DEBUG: ${{ secrets.APP_DEBUG }}
          envkey_APP_URL: ${{ secrets.APP_URL }}
          envkey_LOG_CHANNEL: ${{ secrets.LOG_CHANNEL }}
          envkey_LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          envkey_DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
          envkey_DB_HOST: ${{ secrets.DB_HOST }}
          envkey_DB_PORT: ${{ secrets.DB_PORT }}
          envkey_DB_DATABASE: ${{ secrets.DB_DATABASE }}
          envkey_DB_USERNAME: ${{ secrets.DB_USERNAME }}
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_BROADCAST_DRIVER: ${{ secrets.BROADCAST_DRIVER }}
          envkey_CACHE_DRIVER: ${{ secrets.CACHE_DRIVER }}
          envkey_FILESYSTEM_DRIVER: ${{ secrets.FILESYSTEM_DRIVER }}
          envkey_QUEUE_CONNECTION: ${{ secrets.QUEUE_CONNECTION }}
          envkey_SESSION_DRIVER: ${{ secrets.SESSION_DRIVER }}
          envkey_SESSION_LIFETIME: ${{ secrets.SESSION_LIFETIME }}
          envkey_MEMCACHED_HOST: ${{ secrets.MEMCACHED_HOST }}
          envkey_REDIS_HOST: ${{ secrets.REDIS_HOST }}
          envkey_REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          envkey_REDIS_PORT: ${{ secrets.REDIS_PORT }}
          envkey_MAIL_MAILER: ${{ secrets.MAIL_MAILER }}
          envkey_MAIL_HOST: ${{ secrets.MAIL_HOST }}
          envkey_MAIL_PORT: ${{ secrets.MAIL_PORT }}
          envkey_MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          envkey_MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          envkey_MAIL_ENCRYPTION: ${{ secrets.MAIL_ENCRYPTION }}
          envkey_MAIL_FROM_ADDRESS: ${{ secrets.MAIL_FROM_ADDRESS }}
          envkey_MAIL_FROM_NAME: ${{ secrets.MAIL_FROM_NAME }}
          envkey_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          envkey_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          envkey_AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          envkey_AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
          envkey_PUSHER_APP_ID: ${{ secrets.PUSHER_APP_ID }}
          envkey_PUSHER_APP_KEY: ${{ secrets.PUSHER_APP_KEY }}
          envkey_PUSHER_APP_SECRET: ${{ secrets.PUSHER_APP_SECRET }}
          envkey_PUSHER_APP_CLUSTER: ${{ secrets.PUSHER_APP_CLUSTER }}
          envkey_MIX_PUSHER_APP_KEY: ${{ secrets.MIX_PUSHER_APP_KEY }}
          envkey_MIX_PUSHER_APP_CLUSTER: ${{ secrets.MIX_PUSHER_APP_CLUSTER }}
          directory: ${{ env.ENV_SRC }}
          file_name: ${{ env.ENV_FILE }}
          fail_on_empty: false
          sort_keys: false
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DL_SSH_KEY }}
      - name: Copy envfile
        env:
          ENV_FILE: ${{ secrets.DL_ENV_FILE }}
          ENV_SRC: ${{ secrets.DL_ENV_SRC }}
        run: |
          # Copy .env file into deploy server
          scp -o "StrictHostKeyChecking=no" -r "$ENV_SRC/$ENV_FILE" "$SSH_USERNAME@$SSH_HOST:$ENV_DEST"
      - name: Deploy app
        run: |
          # Deploy the app
          ssh -T -o "StrictHostKeyChecking=no" "$SSH_USERNAME@$SSH_HOST" \
          "APP_DIR=$APP_DIR" \
          'bash -s' < ./app.sh 11
        working-directory: ${{ env.WORK_DIR }}
